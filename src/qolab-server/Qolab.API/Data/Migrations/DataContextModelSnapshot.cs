// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Qolab.API.Data;

#nullable disable

namespace Qolab.API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Qolab.API.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer")
                        .HasColumnName("dislikes");

                    b.Property<bool>("IsAcceptedAnswer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accepted_answer");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_answers");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_answers_article_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_answers_created_by_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answers_question_id");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("Qolab.API.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer")
                        .HasColumnName("dislikes");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<Guid?>("PaperId")
                        .HasColumnType("uuid")
                        .HasColumnName("paper_id");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_articles");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_articles_created_by_id");

                    b.HasIndex("PaperId")
                        .HasDatabaseName("ix_articles_paper_id");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("Qolab.API.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer")
                        .HasColumnName("dislikes");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<Guid?>("ReplyToCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("reply_to_comment_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_comments_article_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_comments_created_by_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Qolab.API.Entities.Paper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("abstract");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authors");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("DOI")
                        .HasColumnType("text")
                        .HasColumnName("doi");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int?>("PublishDay")
                        .HasColumnType("integer")
                        .HasColumnName("publish_day");

                    b.Property<int?>("PublishMonth")
                        .HasColumnType("integer")
                        .HasColumnName("publish_month");

                    b.Property<int?>("PublishYear")
                        .HasColumnType("integer")
                        .HasColumnName("publish_year");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_papers");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_papers_created_by_id");

                    b.ToTable("papers", (string)null);
                });

            modelBuilder.Entity("Qolab.API.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid")
                        .HasColumnName("article_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer")
                        .HasColumnName("dislikes");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<int>("Likes")
                        .HasColumnType("integer")
                        .HasColumnName("likes");

                    b.Property<DateTimeOffset?>("ResolvedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_on");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("ix_questions_article_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_questions_created_by_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Qolab.API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Qolab.API.Entities.Answer", b =>
                {
                    b.HasOne("Qolab.API.Entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_articles_article_id");

                    b.HasOne("Qolab.API.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_users_created_by_id");

                    b.HasOne("Qolab.API.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_questions_question_id");

                    b.Navigation("Article");

                    b.Navigation("CreatedBy");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Qolab.API.Entities.Article", b =>
                {
                    b.HasOne("Qolab.API.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_articles_users_created_by_id");

                    b.HasOne("Qolab.API.Entities.Paper", "Paper")
                        .WithMany()
                        .HasForeignKey("PaperId")
                        .HasConstraintName("fk_articles_papers_paper_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("Qolab.API.Entities.Comment", b =>
                {
                    b.HasOne("Qolab.API.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_articles_article_id");

                    b.HasOne("Qolab.API.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_created_by_id");

                    b.Navigation("Article");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Qolab.API.Entities.Paper", b =>
                {
                    b.HasOne("Qolab.API.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_papers_users_created_by_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Qolab.API.Entities.Question", b =>
                {
                    b.HasOne("Qolab.API.Entities.Article", "Article")
                        .WithMany("Questions")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_articles_article_id");

                    b.HasOne("Qolab.API.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_users_created_by_id");

                    b.Navigation("Article");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Qolab.API.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Qolab.API.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
